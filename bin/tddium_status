#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..' , 'lib'))

require 'rubygems'

require 'tddium_status'
require 'rainbow'

def show
  if TddiumStatus.feeds.empty?
    puts "No feeds have been added to your configuration".inverse
    puts ""
    help
    exit
  end

  projects = TddiumStatus.projects.each do |project|
    line = "#{project.status} #{project.name}"
    if project.passing?
      line = line.foreground(:green)
    else
      line = line.foreground(:red)
    end

    line = line.inverse if project.building?

    puts line
  end
end

def settings
  TddiumStatus.feeds.each do |feed|
    if feed.patterns
      feed.patterns.each do |pattern|
        puts "#{feed.url} #{pattern.inspect}"
      end
    else
      puts feed.url
    end
  end
end

def add(url, pattern)
  if url.nil?
    puts "Usage:  tddium_status add URL REGEX"
    puts ""
    puts "Where:"
    puts " URL         Is the url of the tddium cc feed"
    puts " REGEX       Is an optional regular expression used to match projects"
    exit
  end

  require 'uri'
  url = URI.parse(url)
  feed = TddiumStatus.feeds.find { |f| f.url == url }
  feed ||= TddiumStatus::Feed.new(url)

  if pattern
    regex = eval(pattern)
    raise "#{pattern.inspect} is not a valid regex" unless regex.is_a?(Regexp)
    feed.add_pattern(regex)
  end

  feed.save

  settings
end

def help
  puts "Usage:  tddium_status [COMMAND] OTHER_ARGS"
  puts ""
  puts "Commands:"
  puts " show        Show the current status if your builds"
  puts " settings    Show the currently configured feeds"
  puts " add         Add a new feed"
end

case ARGV[0]
when nil, 'show'
  show
when 'settings'
  settings
when 'add'
  add(ARGV[1], ARGV[2])
else
  help
end
